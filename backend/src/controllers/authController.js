const AuthService = require("../services/authService");
const userService = require("../services/userService"); // –ü—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å!

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫—É–∫ (–≤—ã–Ω–æ—Å–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ)
function parseCookies(cookieHeader) {
    return cookieHeader?.split(';').reduce((cookies, cookie) => {
        const [name, value] = cookie.split('=').map(c => c.trim());
        cookies[name] = value;
        return cookies;
    }, {}) || {};
}

const AuthController = {
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async register(req, res) {
    try {
      const { username, password } = req.body;
      const user = await AuthService.register(username, password);
      res.writeHead(201, { "Content-Type": "application/json" });
      res.end(JSON.stringify({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", user }));
    } catch (error) {
      res.writeHead(400, { "Content-Type": "application/json" });
      res.end(JSON.stringify({ error: error.message }));
    }
  },

  // –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async login(req, res) {
    try {
      const { username, password } = req.body;
      const user = await AuthService.login(username, password);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫–∏ —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      res.writeHead(200, {
        "Set-Cookie": `user_id=${user.id}; HttpOnly; Max-Age=86400; Path=/; SameSite=Lax`,
        "Content-Type": "application/json",
      });

      res.end(JSON.stringify({ message: "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω", user }));
    } catch (error) {
      res.writeHead(400, { "Content-Type": "application/json" });
      res.end(JSON.stringify({ error: error.message }));
    }
  },

  // –õ–æ–≥–∞—É—Ç (—É–¥–∞–ª–µ–Ω–∏–µ –∫—É–∫–∏)
  logout(req, res) {
    res.writeHead(200, {
      "Set-Cookie": "user_id=; HttpOnly; Max-Age=0; Path=/; SameSite=Lax", // –£–¥–∞–ª—è–µ–º cookie
      "Content-Type": "application/json",
    });
    res.end(JSON.stringify({ message: "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã" }));
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  async getUserDataController(req, res) {
    const cookies = parseCookies(req.headers.cookie); // üëà –ü–∞—Ä—Å–∏–º –∫—É–∫–∏ –≤—Ä—É—á–Ω—É—é
    console.log("Cookies:", cookies); // üëà –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ user_id

    const userId = cookies.user_id; // –ü–æ–ª—É—á–∞–µ–º user_id

    if (!userId) {
        res.writeHead(401, { "Content-Type": "application/json" });
        return res.end(JSON.stringify({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" }));
    }

    try {
        const user = await userService.getUserById(userId);

        if (!user) {
            res.writeHead(404, { "Content-Type": "application/json" });
            return res.end(JSON.stringify({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" }));
        }

        res.writeHead(200, { "Content-Type": "application/json" });
        res.end(JSON.stringify(user));
    } catch (error) {
        console.error(error);
        res.writeHead(500, { "Content-Type": "application/json" });
        res.end(JSON.stringify({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }));
    }
  },
};

module.exports = AuthController;
